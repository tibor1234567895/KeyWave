name: Build Release APK, Upload Artifact, and Create GitHub Release

env:
  # The name of the main module repository
  main_project_module: app

  # The name of the Play Store (used in artifact naming)
  playstore_name: Frogobox ID

on:
  push:
    branches:
      - 'main/**'
    tags:
      - 'v*.*.*' # Example: v1.0, v1.2.3 - adjust pattern as needed

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
  contents: write # Grant GITHUB_TOKEN permissions to create releases

jobs:
  build_and_release_apk:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Set Current Date As Env Variable
      - name: Set current date as env variable
        run: echo "date_today=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      # Set Repository Name As Env Variable
      - name: Set repository name as env variable
        run: echo "repository_name=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')" >> $GITHUB_ENV

      - name: Set Up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'gradle'

      - name: Change wrapper permissions
        run: chmod +x ./gradlew

      # Optional: Run Tests Build
      # - name: Run gradle tests
      #   run: ./gradlew test

      # Create APK Release (This will be unsigned if no signing is configured in build.gradle)
      - name: Build apk release project (APK) - ${{ env.main_project_module }} module
        run: ./gradlew :${{ env.main_project_module }}:assembleRelease

      # --- Upload Release APK Artifact to Workflow Run ---
      - name: Upload APK Release - ${{ env.repository_name }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.date_today }} - ${{ env.playstore_name }} - ${{ env.repository_name }} - APK Release (Unsigned)
          path: ${{ env.main_project_module }}/build/outputs/apk/release/*.apk # Be more specific with *.apk

      # --- Create GitHub Release (Only on Tag Push, with Release APK) ---
      - name: Find Release APK for GitHub Release
        if: startsWith(github.ref, 'refs/tags/') # Only run this step if triggered by a tag
        id: find_release_apk
        run: |
          # Try to find specific release APKs first, then any APK in the release folder
          APK_FILE_PATH=$(find ${{ env.main_project_module }}/build/outputs/apk/release -name "*-release.apk" -o -name "*-release-unsigned.apk" -o -name "*.apk" -type f | head -n 1)
          if [ -z "$APK_FILE_PATH" ]; then
            echo "Release APK file not found in ${{ env.main_project_module }}/build/outputs/apk/release/"
            ls -R ${{ env.main_project_module }}/build/outputs/apk/release/ # For debugging
            exit 1
          fi
          echo "Found Release APK: $APK_FILE_PATH"
          echo "apk_path=$APK_FILE_PATH" >> $GITHUB_OUTPUT

      - name: Create GitHub Release with APK
        if: startsWith(github.ref, 'refs/tags/') # Only run this step if triggered by a tag
        id: create_gh_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }} (APK)
          body: |
            Automated release for ${{ github.ref_name }}.

            **This build is an unsigned APK.** If you have signing configured in your Gradle files, this APK will be signed accordingly; otherwise, it will be unsigned or signed with a debug key by default.

            - The Release APK is attached directly to this release.
            - The Release APK is also available as a workflow artifact from the Actions run.
          draft: false
          prerelease: false
          files: |
            ${{ steps.find_release_apk.outputs.apk_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
